// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: subcategory_summaries.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const createSubCategorySummary = `-- name: CreateSubCategorySummary :one
INSERT INTO subcategory_summaries (uid, year, month, category_id, amount)
VALUES ($1, $2, $3, $4, $5)
RETURNING uid, year, month, category_id, amount
`

type CreateSubCategorySummaryParams struct {
	Uid        string          `json:"uid"`
	Year       int32           `json:"year"`
	Month      int32           `json:"month"`
	CategoryID uuid.UUID       `json:"category_id"`
	Amount     decimal.Decimal `json:"amount"`
}

func (q *Queries) CreateSubCategorySummary(ctx context.Context, arg CreateSubCategorySummaryParams) (SubcategorySummary, error) {
	row := q.db.QueryRow(ctx, createSubCategorySummary,
		arg.Uid,
		arg.Year,
		arg.Month,
		arg.CategoryID,
		arg.Amount,
	)
	var i SubcategorySummary
	err := row.Scan(
		&i.Uid,
		&i.Year,
		&i.Month,
		&i.CategoryID,
		&i.Amount,
	)
	return i, err
}

const getSubCategorySummariesByMonth = `-- name: GetSubCategorySummariesByMonth :many
SELECT category_id, amount
FROM subcategory_summaries
WHERE uid = $1 AND year = $2 AND month = $3
`

type GetSubCategorySummariesByMonthParams struct {
	Uid   string `json:"uid"`
	Year  int32  `json:"year"`
	Month int32  `json:"month"`
}

type GetSubCategorySummariesByMonthRow struct {
	CategoryID uuid.UUID       `json:"category_id"`
	Amount     decimal.Decimal `json:"amount"`
}

func (q *Queries) GetSubCategorySummariesByMonth(ctx context.Context, arg GetSubCategorySummariesByMonthParams) ([]GetSubCategorySummariesByMonthRow, error) {
	rows, err := q.db.Query(ctx, getSubCategorySummariesByMonth, arg.Uid, arg.Year, arg.Month)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSubCategorySummariesByMonthRow{}
	for rows.Next() {
		var i GetSubCategorySummariesByMonthRow
		if err := rows.Scan(&i.CategoryID, &i.Amount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubCategorySummary = `-- name: GetSubCategorySummary :one
SELECT uid, year, month, category_id, amount FROM subcategory_summaries
WHERE uid = $1 AND year = $2 AND month = $3 AND category_id = $4
`

type GetSubCategorySummaryParams struct {
	Uid        string    `json:"uid"`
	Year       int32     `json:"year"`
	Month      int32     `json:"month"`
	CategoryID uuid.UUID `json:"category_id"`
}

func (q *Queries) GetSubCategorySummary(ctx context.Context, arg GetSubCategorySummaryParams) (SubcategorySummary, error) {
	row := q.db.QueryRow(ctx, getSubCategorySummary,
		arg.Uid,
		arg.Year,
		arg.Month,
		arg.CategoryID,
	)
	var i SubcategorySummary
	err := row.Scan(
		&i.Uid,
		&i.Year,
		&i.Month,
		&i.CategoryID,
		&i.Amount,
	)
	return i, err
}

const updateSubCategorySummary = `-- name: UpdateSubCategorySummary :one
UPDATE subcategory_summaries
SET amount = $1
WHERE uid = $2 AND year = $3 AND month = $4 AND category_id = $5
RETURNING uid, year, month, category_id, amount
`

type UpdateSubCategorySummaryParams struct {
	Amount     decimal.Decimal `json:"amount"`
	Uid        string          `json:"uid"`
	Year       int32           `json:"year"`
	Month      int32           `json:"month"`
	CategoryID uuid.UUID       `json:"category_id"`
}

func (q *Queries) UpdateSubCategorySummary(ctx context.Context, arg UpdateSubCategorySummaryParams) (SubcategorySummary, error) {
	row := q.db.QueryRow(ctx, updateSubCategorySummary,
		arg.Amount,
		arg.Uid,
		arg.Year,
		arg.Month,
		arg.CategoryID,
	)
	var i SubcategorySummary
	err := row.Scan(
		&i.Uid,
		&i.Year,
		&i.Month,
		&i.CategoryID,
		&i.Amount,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sub_categories.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createSubCategory = `-- name: CreateSubCategory :one
INSERT INTO sub_categories (
  category_id,
  category_name
) VALUES (
  $1, $2
) RETURNING category_id, category_name, created_at
`

type CreateSubCategoryParams struct {
	CategoryID   uuid.UUID `json:"category_id"`
	CategoryName string    `json:"category_name"`
}

func (q *Queries) CreateSubCategory(ctx context.Context, arg CreateSubCategoryParams) (SubCategory, error) {
	row := q.db.QueryRow(ctx, createSubCategory, arg.CategoryID, arg.CategoryName)
	var i SubCategory
	err := row.Scan(&i.CategoryID, &i.CategoryName, &i.CreatedAt)
	return i, err
}

const deleteSubCategory = `-- name: DeleteSubCategory :exec
DELETE FROM sub_categories
WHERE category_id = $1
`

func (q *Queries) DeleteSubCategory(ctx context.Context, categoryID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSubCategory, categoryID)
	return err
}

const getSubCategoryByName = `-- name: GetSubCategoryByName :one
SELECT category_id, category_name, created_at FROM sub_categories
WHERE category_name = $1
`

func (q *Queries) GetSubCategoryByName(ctx context.Context, categoryName string) (SubCategory, error) {
	row := q.db.QueryRow(ctx, getSubCategoryByName, categoryName)
	var i SubCategory
	err := row.Scan(&i.CategoryID, &i.CategoryName, &i.CreatedAt)
	return i, err
}

const getUserUsedSubCategories = `-- name: GetUserUsedSubCategories :many
SELECT s.category_name, s.category_id
  FROM sub_categories s
  JOIN (
    SELECT ps.category_id, COUNT(*) AS post_count
      FROM posts p
      JOIN post_subcategories ps ON p.post_id = ps.post_id
     WHERE p.uid = $1
     GROUP BY ps.category_id
     ORDER BY post_count DESC
     LIMIT 20
  ) AS top_categories ON s.category_id = top_categories.category_id
ORDER BY top_categories.post_count DESC
`

type GetUserUsedSubCategoriesRow struct {
	CategoryName string    `json:"category_name"`
	CategoryID   uuid.UUID `json:"category_id"`
}

func (q *Queries) GetUserUsedSubCategories(ctx context.Context, uid string) ([]GetUserUsedSubCategoriesRow, error) {
	rows, err := q.db.Query(ctx, getUserUsedSubCategories, uid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserUsedSubCategoriesRow{}
	for rows.Next() {
		var i GetUserUsedSubCategoriesRow
		if err := rows.Scan(&i.CategoryName, &i.CategoryID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

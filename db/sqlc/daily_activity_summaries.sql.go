// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: daily_activity_summaries.sql

package db

import (
	"context"

	"github.com/shopspring/decimal"
)

const createDailyActivitySummary = `-- name: CreateDailyActivitySummary :one
INSERT INTO daily_activity_summaries (uid, year, month, day, number, amount)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING uid, year, month, day, number, amount
`

type CreateDailyActivitySummaryParams struct {
	Uid    string          `json:"uid"`
	Year   int32           `json:"year"`
	Month  int32           `json:"month"`
	Day    int32           `json:"day"`
	Number int32           `json:"number"`
	Amount decimal.Decimal `json:"amount"`
}

func (q *Queries) CreateDailyActivitySummary(ctx context.Context, arg CreateDailyActivitySummaryParams) (DailyActivitySummary, error) {
	row := q.db.QueryRow(ctx, createDailyActivitySummary,
		arg.Uid,
		arg.Year,
		arg.Month,
		arg.Day,
		arg.Number,
		arg.Amount,
	)
	var i DailyActivitySummary
	err := row.Scan(
		&i.Uid,
		&i.Year,
		&i.Month,
		&i.Day,
		&i.Number,
		&i.Amount,
	)
	return i, err
}

const getDailyActivitySummariesByMonth = `-- name: GetDailyActivitySummariesByMonth :many
SELECT day, number, amount
FROM daily_activity_summaries
WHERE uid = $1 AND year = $2 AND month = $3
ORDER BY day ASC
`

type GetDailyActivitySummariesByMonthParams struct {
	Uid   string `json:"uid"`
	Year  int32  `json:"year"`
	Month int32  `json:"month"`
}

type GetDailyActivitySummariesByMonthRow struct {
	Day    int32           `json:"day"`
	Number int32           `json:"number"`
	Amount decimal.Decimal `json:"amount"`
}

func (q *Queries) GetDailyActivitySummariesByMonth(ctx context.Context, arg GetDailyActivitySummariesByMonthParams) ([]GetDailyActivitySummariesByMonthRow, error) {
	rows, err := q.db.Query(ctx, getDailyActivitySummariesByMonth, arg.Uid, arg.Year, arg.Month)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDailyActivitySummariesByMonthRow{}
	for rows.Next() {
		var i GetDailyActivitySummariesByMonthRow
		if err := rows.Scan(&i.Day, &i.Number, &i.Amount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDailyActivitySummary = `-- name: GetDailyActivitySummary :one
SELECT uid, year, month, day, number, amount FROM daily_activity_summaries
WHERE uid = $1 AND year = $2 AND month = $3 AND day = $4
`

type GetDailyActivitySummaryParams struct {
	Uid   string `json:"uid"`
	Year  int32  `json:"year"`
	Month int32  `json:"month"`
	Day   int32  `json:"day"`
}

func (q *Queries) GetDailyActivitySummary(ctx context.Context, arg GetDailyActivitySummaryParams) (DailyActivitySummary, error) {
	row := q.db.QueryRow(ctx, getDailyActivitySummary,
		arg.Uid,
		arg.Year,
		arg.Month,
		arg.Day,
	)
	var i DailyActivitySummary
	err := row.Scan(
		&i.Uid,
		&i.Year,
		&i.Month,
		&i.Day,
		&i.Number,
		&i.Amount,
	)
	return i, err
}

const updateDailyActivitySummary = `-- name: UpdateDailyActivitySummary :one
UPDATE daily_activity_summaries
SET number = $1, amount = $2
WHERE uid = $3 AND year = $4 AND month = $5 AND day = $6
RETURNING uid, year, month, day, number, amount
`

type UpdateDailyActivitySummaryParams struct {
	Number int32           `json:"number"`
	Amount decimal.Decimal `json:"amount"`
	Uid    string          `json:"uid"`
	Year   int32           `json:"year"`
	Month  int32           `json:"month"`
	Day    int32           `json:"day"`
}

func (q *Queries) UpdateDailyActivitySummary(ctx context.Context, arg UpdateDailyActivitySummaryParams) (DailyActivitySummary, error) {
	row := q.db.QueryRow(ctx, updateDailyActivitySummary,
		arg.Number,
		arg.Amount,
		arg.Uid,
		arg.Year,
		arg.Month,
		arg.Day,
	)
	var i DailyActivitySummary
	err := row.Scan(
		&i.Uid,
		&i.Year,
		&i.Month,
		&i.Day,
		&i.Number,
		&i.Amount,
	)
	return i, err
}

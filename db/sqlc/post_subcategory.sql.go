// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: post_subcategory.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createPostSubCategory = `-- name: CreatePostSubCategory :one
INSERT INTO "post_subcategory" (
  "post_id",
  "subcategory_no",
  "sub_category"
) VALUES (
  $1, $2, $3
) RETURNING post_subcategory_id, post_id, subcategory_no, sub_category
`

type CreatePostSubCategoryParams struct {
	PostID        uuid.UUID `json:"post_id"`
	SubcategoryNo string    `json:"subcategory_no"`
	SubCategory   string    `json:"sub_category"`
}

func (q *Queries) CreatePostSubCategory(ctx context.Context, arg CreatePostSubCategoryParams) (PostSubcategory, error) {
	row := q.db.QueryRow(ctx, createPostSubCategory, arg.PostID, arg.SubcategoryNo, arg.SubCategory)
	var i PostSubcategory
	err := row.Scan(
		&i.PostSubcategoryID,
		&i.PostID,
		&i.SubcategoryNo,
		&i.SubCategory,
	)
	return i, err
}

const getPostSubCategory1ByPostId = `-- name: GetPostSubCategory1ByPostId :one
SELECT post_subcategory_id, post_id, subcategory_no, sub_category FROM "post_subcategory"
WHERE "post_id" = $1 AND "subcategory_no" = '1'
`

func (q *Queries) GetPostSubCategory1ByPostId(ctx context.Context, postID uuid.UUID) (PostSubcategory, error) {
	row := q.db.QueryRow(ctx, getPostSubCategory1ByPostId, postID)
	var i PostSubcategory
	err := row.Scan(
		&i.PostSubcategoryID,
		&i.PostID,
		&i.SubcategoryNo,
		&i.SubCategory,
	)
	return i, err
}

const getPostSubCategory2ByPostId = `-- name: GetPostSubCategory2ByPostId :one
SELECT post_subcategory_id, post_id, subcategory_no, sub_category FROM "post_subcategory"
WHERE "post_id" = $1 AND "subcategory_no" = '2'
`

func (q *Queries) GetPostSubCategory2ByPostId(ctx context.Context, postID uuid.UUID) (PostSubcategory, error) {
	row := q.db.QueryRow(ctx, getPostSubCategory2ByPostId, postID)
	var i PostSubcategory
	err := row.Scan(
		&i.PostSubcategoryID,
		&i.PostID,
		&i.SubcategoryNo,
		&i.SubCategory,
	)
	return i, err
}

const getPostSubCategoryByPostId = `-- name: GetPostSubCategoryByPostId :many
SELECT post_subcategory_id, post_id, subcategory_no, sub_category FROM "post_subcategory"
WHERE "post_id" = $1
`

func (q *Queries) GetPostSubCategoryByPostId(ctx context.Context, postID uuid.UUID) ([]PostSubcategory, error) {
	rows, err := q.db.Query(ctx, getPostSubCategoryByPostId, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PostSubcategory{}
	for rows.Next() {
		var i PostSubcategory
		if err := rows.Scan(
			&i.PostSubcategoryID,
			&i.PostID,
			&i.SubcategoryNo,
			&i.SubCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

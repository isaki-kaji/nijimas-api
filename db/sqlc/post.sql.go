// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: post.sql

package db

import (
	"context"
	"database/sql"
)

const createPost = `-- name: CreatePost :one
INSERT INTO "post" (
  "user_id",
  "main_category",
  "post_text",
  "photo_url",
  "room_id",
  "meal_flag",
  "location",
  "public_type_no"
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING post_id, user_id, main_category, room_id, post_text, photo_url, location, meal_flag, public_type_no, created_at
`

type CreatePostParams struct {
	UserID       int64          `json:"user_id"`
	MainCategory string         `json:"main_category"`
	PostText     sql.NullString `json:"post_text"`
	PhotoUrl     sql.NullString `json:"photo_url"`
	RoomID       sql.NullInt64  `json:"room_id"`
	MealFlag     bool           `json:"meal_flag"`
	Location     interface{}    `json:"location"`
	PublicTypeNo string         `json:"public_type_no"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.UserID,
		arg.MainCategory,
		arg.PostText,
		arg.PhotoUrl,
		arg.RoomID,
		arg.MealFlag,
		arg.Location,
		arg.PublicTypeNo,
	)
	var i Post
	err := row.Scan(
		&i.PostID,
		&i.UserID,
		&i.MainCategory,
		&i.RoomID,
		&i.PostText,
		&i.PhotoUrl,
		&i.Location,
		&i.MealFlag,
		&i.PublicTypeNo,
		&i.CreatedAt,
	)
	return i, err
}

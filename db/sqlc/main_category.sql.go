// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: main_category.sql

package db

import (
	"context"
)

const createMainCategory = `-- name: CreateMainCategory :one
INSERT INTO "main_category" (
 "category_name"
) VALUES (
 $1
) RETURNING category_name, created_at
`

func (q *Queries) CreateMainCategory(ctx context.Context, categoryName string) (MainCategory, error) {
	row := q.db.QueryRow(ctx, createMainCategory, categoryName)
	var i MainCategory
	err := row.Scan(&i.CategoryName, &i.CreatedAt)
	return i, err
}

const getMainCategories = `-- name: GetMainCategories :many
SELECT category_name, created_at FROM "main_category"
`

func (q *Queries) GetMainCategories(ctx context.Context) ([]MainCategory, error) {
	rows, err := q.db.Query(ctx, getMainCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MainCategory{}
	for rows.Next() {
		var i MainCategory
		if err := rows.Scan(&i.CategoryName, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMainCategory = `-- name: GetMainCategory :one
SELECT category_name, created_at FROM "main_category"
WHERE "category_name" = $1
`

func (q *Queries) GetMainCategory(ctx context.Context, categoryName string) (MainCategory, error) {
	row := q.db.QueryRow(ctx, getMainCategory, categoryName)
	var i MainCategory
	err := row.Scan(&i.CategoryName, &i.CreatedAt)
	return i, err
}

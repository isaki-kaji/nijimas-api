// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: follow_requests.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createFollowRequest = `-- name: CreateFollowRequest :one
INSERT INTO follow_requests (
  request_id,
  uid,
  following_uid,
  status
) VALUES (
  $1, $2, $3, '0'
) RETURNING request_id, uid, following_uid, status, created_at, updated_at
`

type CreateFollowRequestParams struct {
	RequestID    uuid.UUID `json:"request_id"`
	Uid          string    `json:"uid"`
	FollowingUid string    `json:"following_uid"`
}

func (q *Queries) CreateFollowRequest(ctx context.Context, arg CreateFollowRequestParams) (FollowRequest, error) {
	row := q.db.QueryRow(ctx, createFollowRequest, arg.RequestID, arg.Uid, arg.FollowingUid)
	var i FollowRequest
	err := row.Scan(
		&i.RequestID,
		&i.Uid,
		&i.FollowingUid,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFollowRequest = `-- name: DeleteFollowRequest :one
DELETE FROM follow_requests
WHERE following_uid = $2 AND uid = $1 AND status = '0'
RETURNING request_id, uid, following_uid, status, created_at, updated_at
`

type DeleteFollowRequestParams struct {
	Uid          string `json:"uid"`
	FollowingUid string `json:"following_uid"`
}

func (q *Queries) DeleteFollowRequest(ctx context.Context, arg DeleteFollowRequestParams) (FollowRequest, error) {
	row := q.db.QueryRow(ctx, deleteFollowRequest, arg.Uid, arg.FollowingUid)
	var i FollowRequest
	err := row.Scan(
		&i.RequestID,
		&i.Uid,
		&i.FollowingUid,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFollowRequest = `-- name: GetFollowRequest :one
SELECT request_id, uid, following_uid, status, created_at, updated_at 
FROM follow_requests
WHERE uid = $1 AND following_uid = $2 AND status = '0'
ORDER BY request_id DESC
LIMIT 1
`

type GetFollowRequestParams struct {
	Uid          string `json:"uid"`
	FollowingUid string `json:"following_uid"`
}

func (q *Queries) GetFollowRequest(ctx context.Context, arg GetFollowRequestParams) (FollowRequest, error) {
	row := q.db.QueryRow(ctx, getFollowRequest, arg.Uid, arg.FollowingUid)
	var i FollowRequest
	err := row.Scan(
		&i.RequestID,
		&i.Uid,
		&i.FollowingUid,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFollowRequests = `-- name: GetFollowRequests :many
SELECT
  fr.request_id,
  u.uid,
  u.username,
  u.profile_image_url
FROM users u
JOIN follow_requests fr
ON u.uid = fr.uid
WHERE fr.following_uid = $1 AND fr.status = '0'
`

type GetFollowRequestsRow struct {
	RequestID       uuid.UUID `json:"request_id"`
	Uid             string    `json:"uid"`
	Username        string    `json:"username"`
	ProfileImageUrl *string   `json:"profile_image_url"`
}

func (q *Queries) GetFollowRequests(ctx context.Context, followingUid string) ([]GetFollowRequestsRow, error) {
	rows, err := q.db.Query(ctx, getFollowRequests, followingUid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetFollowRequestsRow{}
	for rows.Next() {
		var i GetFollowRequestsRow
		if err := rows.Scan(
			&i.RequestID,
			&i.Uid,
			&i.Username,
			&i.ProfileImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFollowRequestToAccepted = `-- name: UpdateFollowRequestToAccepted :one
UPDATE follow_requests
SET status = '1'
WHERE request_id = $1
RETURNING request_id, uid, following_uid, status, created_at, updated_at
`

func (q *Queries) UpdateFollowRequestToAccepted(ctx context.Context, requestID uuid.UUID) (FollowRequest, error) {
	row := q.db.QueryRow(ctx, updateFollowRequestToAccepted, requestID)
	var i FollowRequest
	err := row.Scan(
		&i.RequestID,
		&i.Uid,
		&i.FollowingUid,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateRequestToRejected = `-- name: UpdateRequestToRejected :one
UPDATE follow_requests
SET status = '2'
WHERE request_id = $1
RETURNING request_id, uid, following_uid, status, created_at, updated_at
`

func (q *Queries) UpdateRequestToRejected(ctx context.Context, requestID uuid.UUID) (FollowRequest, error) {
	row := q.db.QueryRow(ctx, updateRequestToRejected, requestID)
	var i FollowRequest
	err := row.Scan(
		&i.RequestID,
		&i.Uid,
		&i.FollowingUid,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

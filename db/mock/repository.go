// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/isaki-kaji/nijimas-api/db/sqlc (interfaces: Repository)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	db "github.com/isaki-kaji/nijimas-api/db/sqlc"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateDailyActivitySummary mocks base method.
func (m *MockRepository) CreateDailyActivitySummary(arg0 context.Context, arg1 db.CreateDailyActivitySummaryParams) (db.DailyActivitySummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDailyActivitySummary", arg0, arg1)
	ret0, _ := ret[0].(db.DailyActivitySummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDailyActivitySummary indicates an expected call of CreateDailyActivitySummary.
func (mr *MockRepositoryMockRecorder) CreateDailyActivitySummary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDailyActivitySummary", reflect.TypeOf((*MockRepository)(nil).CreateDailyActivitySummary), arg0, arg1)
}

// CreateExpenseSummary mocks base method.
func (m *MockRepository) CreateExpenseSummary(arg0 context.Context, arg1 db.CreateExpenseSummaryParams) (db.ExpenseSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExpenseSummary", arg0, arg1)
	ret0, _ := ret[0].(db.ExpenseSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExpenseSummary indicates an expected call of CreateExpenseSummary.
func (mr *MockRepositoryMockRecorder) CreateExpenseSummary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExpenseSummary", reflect.TypeOf((*MockRepository)(nil).CreateExpenseSummary), arg0, arg1)
}

// CreateFavorite mocks base method.
func (m *MockRepository) CreateFavorite(arg0 context.Context, arg1 db.CreateFavoriteParams) (db.Favorite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFavorite", arg0, arg1)
	ret0, _ := ret[0].(db.Favorite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFavorite indicates an expected call of CreateFavorite.
func (mr *MockRepositoryMockRecorder) CreateFavorite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFavorite", reflect.TypeOf((*MockRepository)(nil).CreateFavorite), arg0, arg1)
}

// CreatePost mocks base method.
func (m *MockRepository) CreatePost(arg0 context.Context, arg1 db.CreatePostParams) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockRepositoryMockRecorder) CreatePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockRepository)(nil).CreatePost), arg0, arg1)
}

// CreatePostSubCategory mocks base method.
func (m *MockRepository) CreatePostSubCategory(arg0 context.Context, arg1 db.CreatePostSubCategoryParams) (db.PostSubcategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostSubCategory", arg0, arg1)
	ret0, _ := ret[0].(db.PostSubcategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePostSubCategory indicates an expected call of CreatePostSubCategory.
func (mr *MockRepositoryMockRecorder) CreatePostSubCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostSubCategory", reflect.TypeOf((*MockRepository)(nil).CreatePostSubCategory), arg0, arg1)
}

// CreatePostTx mocks base method.
func (m *MockRepository) CreatePostTx(arg0 context.Context, arg1 db.CreatePostTxParam) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostTx", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePostTx indicates an expected call of CreatePostTx.
func (mr *MockRepositoryMockRecorder) CreatePostTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostTx", reflect.TypeOf((*MockRepository)(nil).CreatePostTx), arg0, arg1)
}

// CreateSubCategory mocks base method.
func (m *MockRepository) CreateSubCategory(arg0 context.Context, arg1 db.CreateSubCategoryParams) (db.SubCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubCategory", arg0, arg1)
	ret0, _ := ret[0].(db.SubCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubCategory indicates an expected call of CreateSubCategory.
func (mr *MockRepositoryMockRecorder) CreateSubCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubCategory", reflect.TypeOf((*MockRepository)(nil).CreateSubCategory), arg0, arg1)
}

// CreateSubCategorySummary mocks base method.
func (m *MockRepository) CreateSubCategorySummary(arg0 context.Context, arg1 db.CreateSubCategorySummaryParams) (db.SubcategorySummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubCategorySummary", arg0, arg1)
	ret0, _ := ret[0].(db.SubcategorySummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubCategorySummary indicates an expected call of CreateSubCategorySummary.
func (mr *MockRepositoryMockRecorder) CreateSubCategorySummary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubCategorySummary", reflect.TypeOf((*MockRepository)(nil).CreateSubCategorySummary), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), arg0, arg1)
}

// DeleteFavorite mocks base method.
func (m *MockRepository) DeleteFavorite(arg0 context.Context, arg1 db.DeleteFavoriteParams) (db.Favorite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFavorite", arg0, arg1)
	ret0, _ := ret[0].(db.Favorite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFavorite indicates an expected call of DeleteFavorite.
func (mr *MockRepositoryMockRecorder) DeleteFavorite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFavorite", reflect.TypeOf((*MockRepository)(nil).DeleteFavorite), arg0, arg1)
}

// GetDailyActivitySummariesByMonth mocks base method.
func (m *MockRepository) GetDailyActivitySummariesByMonth(arg0 context.Context, arg1 db.GetDailyActivitySummariesByMonthParams) ([]db.GetDailyActivitySummariesByMonthRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDailyActivitySummariesByMonth", arg0, arg1)
	ret0, _ := ret[0].([]db.GetDailyActivitySummariesByMonthRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDailyActivitySummariesByMonth indicates an expected call of GetDailyActivitySummariesByMonth.
func (mr *MockRepositoryMockRecorder) GetDailyActivitySummariesByMonth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDailyActivitySummariesByMonth", reflect.TypeOf((*MockRepository)(nil).GetDailyActivitySummariesByMonth), arg0, arg1)
}

// GetDailyActivitySummary mocks base method.
func (m *MockRepository) GetDailyActivitySummary(arg0 context.Context, arg1 db.GetDailyActivitySummaryParams) (db.DailyActivitySummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDailyActivitySummary", arg0, arg1)
	ret0, _ := ret[0].(db.DailyActivitySummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDailyActivitySummary indicates an expected call of GetDailyActivitySummary.
func (mr *MockRepositoryMockRecorder) GetDailyActivitySummary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDailyActivitySummary", reflect.TypeOf((*MockRepository)(nil).GetDailyActivitySummary), arg0, arg1)
}

// GetExpenseSummariesByMonth mocks base method.
func (m *MockRepository) GetExpenseSummariesByMonth(arg0 context.Context, arg1 db.GetExpenseSummariesByMonthParams) ([]db.GetExpenseSummariesByMonthRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpenseSummariesByMonth", arg0, arg1)
	ret0, _ := ret[0].([]db.GetExpenseSummariesByMonthRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpenseSummariesByMonth indicates an expected call of GetExpenseSummariesByMonth.
func (mr *MockRepositoryMockRecorder) GetExpenseSummariesByMonth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpenseSummariesByMonth", reflect.TypeOf((*MockRepository)(nil).GetExpenseSummariesByMonth), arg0, arg1)
}

// GetExpenseSummary mocks base method.
func (m *MockRepository) GetExpenseSummary(arg0 context.Context, arg1 db.GetExpenseSummaryParams) (db.ExpenseSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpenseSummary", arg0, arg1)
	ret0, _ := ret[0].(db.ExpenseSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpenseSummary indicates an expected call of GetExpenseSummary.
func (mr *MockRepositoryMockRecorder) GetExpenseSummary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpenseSummary", reflect.TypeOf((*MockRepository)(nil).GetExpenseSummary), arg0, arg1)
}

// GetFavorite mocks base method.
func (m *MockRepository) GetFavorite(arg0 context.Context, arg1 db.GetFavoriteParams) (db.Favorite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavorite", arg0, arg1)
	ret0, _ := ret[0].(db.Favorite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavorite indicates an expected call of GetFavorite.
func (mr *MockRepositoryMockRecorder) GetFavorite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavorite", reflect.TypeOf((*MockRepository)(nil).GetFavorite), arg0, arg1)
}

// GetFollowUsers mocks base method.
func (m *MockRepository) GetFollowUsers(arg0 context.Context, arg1 string) ([]db.GetFollowUsersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.GetFollowUsersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowUsers indicates an expected call of GetFollowUsers.
func (mr *MockRepositoryMockRecorder) GetFollowUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowUsers", reflect.TypeOf((*MockRepository)(nil).GetFollowUsers), arg0, arg1)
}

// GetOwnPosts mocks base method.
func (m *MockRepository) GetOwnPosts(arg0 context.Context, arg1 string) ([]db.GetOwnPostsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnPosts", arg0, arg1)
	ret0, _ := ret[0].([]db.GetOwnPostsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnPosts indicates an expected call of GetOwnPosts.
func (mr *MockRepositoryMockRecorder) GetOwnPosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnPosts", reflect.TypeOf((*MockRepository)(nil).GetOwnPosts), arg0, arg1)
}

// GetPostById mocks base method.
func (m *MockRepository) GetPostById(arg0 context.Context, arg1 uuid.UUID) (db.GetPostByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostById", arg0, arg1)
	ret0, _ := ret[0].(db.GetPostByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostById indicates an expected call of GetPostById.
func (mr *MockRepositoryMockRecorder) GetPostById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostById", reflect.TypeOf((*MockRepository)(nil).GetPostById), arg0, arg1)
}

// GetSubCategoryByName mocks base method.
func (m *MockRepository) GetSubCategoryByName(arg0 context.Context, arg1 string) (db.SubCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubCategoryByName", arg0, arg1)
	ret0, _ := ret[0].(db.SubCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubCategoryByName indicates an expected call of GetSubCategoryByName.
func (mr *MockRepositoryMockRecorder) GetSubCategoryByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubCategoryByName", reflect.TypeOf((*MockRepository)(nil).GetSubCategoryByName), arg0, arg1)
}

// GetSubCategorySummariesByMonth mocks base method.
func (m *MockRepository) GetSubCategorySummariesByMonth(arg0 context.Context, arg1 db.GetSubCategorySummariesByMonthParams) ([]db.GetSubCategorySummariesByMonthRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubCategorySummariesByMonth", arg0, arg1)
	ret0, _ := ret[0].([]db.GetSubCategorySummariesByMonthRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubCategorySummariesByMonth indicates an expected call of GetSubCategorySummariesByMonth.
func (mr *MockRepositoryMockRecorder) GetSubCategorySummariesByMonth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubCategorySummariesByMonth", reflect.TypeOf((*MockRepository)(nil).GetSubCategorySummariesByMonth), arg0, arg1)
}

// GetSubCategorySummary mocks base method.
func (m *MockRepository) GetSubCategorySummary(arg0 context.Context, arg1 db.GetSubCategorySummaryParams) (db.SubcategorySummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubCategorySummary", arg0, arg1)
	ret0, _ := ret[0].(db.SubcategorySummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubCategorySummary indicates an expected call of GetSubCategorySummary.
func (mr *MockRepositoryMockRecorder) GetSubCategorySummary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubCategorySummary", reflect.TypeOf((*MockRepository)(nil).GetSubCategorySummary), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockRepository) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockRepositoryMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockRepository)(nil).GetUser), arg0, arg1)
}

// UpdateDailyActivitySummary mocks base method.
func (m *MockRepository) UpdateDailyActivitySummary(arg0 context.Context, arg1 db.UpdateDailyActivitySummaryParams) (db.DailyActivitySummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDailyActivitySummary", arg0, arg1)
	ret0, _ := ret[0].(db.DailyActivitySummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDailyActivitySummary indicates an expected call of UpdateDailyActivitySummary.
func (mr *MockRepositoryMockRecorder) UpdateDailyActivitySummary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDailyActivitySummary", reflect.TypeOf((*MockRepository)(nil).UpdateDailyActivitySummary), arg0, arg1)
}

// UpdateExpenseSummary mocks base method.
func (m *MockRepository) UpdateExpenseSummary(arg0 context.Context, arg1 db.UpdateExpenseSummaryParams) (db.ExpenseSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExpenseSummary", arg0, arg1)
	ret0, _ := ret[0].(db.ExpenseSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExpenseSummary indicates an expected call of UpdateExpenseSummary.
func (mr *MockRepositoryMockRecorder) UpdateExpenseSummary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExpenseSummary", reflect.TypeOf((*MockRepository)(nil).UpdateExpenseSummary), arg0, arg1)
}

// UpdatePost mocks base method.
func (m *MockRepository) UpdatePost(arg0 context.Context, arg1 db.UpdatePostParams) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockRepositoryMockRecorder) UpdatePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockRepository)(nil).UpdatePost), arg0, arg1)
}

// UpdateSubCategorySummary mocks base method.
func (m *MockRepository) UpdateSubCategorySummary(arg0 context.Context, arg1 db.UpdateSubCategorySummaryParams) (db.SubcategorySummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubCategorySummary", arg0, arg1)
	ret0, _ := ret[0].(db.SubcategorySummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubCategorySummary indicates an expected call of UpdateSubCategorySummary.
func (mr *MockRepositoryMockRecorder) UpdateSubCategorySummary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubCategorySummary", reflect.TypeOf((*MockRepository)(nil).UpdateSubCategorySummary), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockRepository) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockRepositoryMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockRepository)(nil).UpdateUser), arg0, arg1)
}
